gemerate_time_serie <- function(t_max, theta, df, initial_value){
  time_serie <- vector()
  
  time_serie[1] <- initial_value
  
  for (t in 2:t_max) {
    residual = rt(1, df, 0)
    time_serie[t] = theta * time_serie[t - 1] + residual
  }
  return(time_serie)
  
}

generate_time_serie_ma <- function(t_max, theta, df) {
  time_serie <- vector()
  residual <- rt(1, df, 0)
  for (t in 1:t_max) {
    old_residual <- residual
    residual <- rt(1, df, 0)
    time_serie[t] = residual + theta * old_residual
  }
  return(time_serie)
}

#Returns the confidence intervals for theta parameter using bootstrap algorithm
block_bootstrap <- function(t_max, alpha, l, k, time_serie) {
  samples <- sample(0:(t_max - l), k, replace = TRUE)
  boots <- vector()
  for (i in 1:k) {
    subserie <- time_serie[samples[i]:(samples[i] + l)]
    boots[i] = arima(subserie, order=c(1,0,0))$coef[[1]]
    
  }
  boots <- sort(boots)
  lower_limit <- boots[floor((1 - alpha)/2 *k)]
  upper_limit <- boots[floor((1 + alpha)/2*k) + 1]
  
  return(c(lower_limit, upper_limit))
}

loop <- function(iterations, t_max, alpha, l, k, theta, df, monitoring_value, initial_value) {
  is_in_internval <- vector()
  
  for (count in 1:iterations) {
    #Simulate AR(1) time serie
    time_serie <- gemerate_time_serie(t_max, theta, df, initial_value)
    
    limits <- block_bootstrap(t_max, alpha, l, k, time_serie)
    
    if (theta < limits[2] && theta > limits[1]) {
      is_in_internval[count] = 1
    }else {
      is_in_internval[count] = 0
    }
    if (count%%monitoring_value == 0) {
      print(count)
    }
  }
  return(sum(is_in_internval)/length(is_in_internval))
}

main <- function(){
  iterations <- 100
  #The length of time serie
  t_max <- 1500
  
  #Only for debuging the execution time,ignore
  monitoring_value <- 10
  
  initial_value <- rt(1, 5, 0)
  
  #The significance level
  alpha <- 0.9
  
  
  #The length of the block
  l = 480
  
  #Number of blocks
  k = 100
  
  #AR(1) model parameter
  theta <- 0.5
  
  # t distribution parameter
  df <- 5 
  
  #Initial value for time serie (X_1)
  initial_value = rt(1, df, 0)
  
  return(loop(iterations, t_max, alpha, l, k, theta, df, monitoring_value, initial_value))
}

main()
